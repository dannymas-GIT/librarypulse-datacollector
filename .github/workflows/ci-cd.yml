name: LibraryPulse CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    # Include paths that should trigger this workflow
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  # Allow manual trigger
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  basic-health-check:
    name: Basic Health Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install basic dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install pytest
        
    - name: Create simple test file
      run: |
        mkdir -p backend/tests
        cat > backend/tests/test_health.py << 'EOF'
        def test_health_endpoint():
            """Simple test that always passes."""
            assert True
        EOF
        
    - name: Run basic test
      run: |
        cd backend
        python -m pytest tests/test_health.py -v

  docker-build:
    name: Docker Build
    needs: [basic-health-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: librarypulse-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

  build-and-push:
    name: Build and Push Container
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

  # Uncomment when ready to deploy
  # deploy:
  #   name: Deploy to AWS Lightsail
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #       
  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     
  #     - name: Deploy to Lightsail
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.LIGHTSAIL_HOST }}
  #         username: ${{ secrets.LIGHTSAIL_USERNAME }}
  #         key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
  #         script: |
  #           cd /opt/librarypulse
  #           echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #           docker compose pull
  #           docker compose up -d
  #           docker system prune -f 